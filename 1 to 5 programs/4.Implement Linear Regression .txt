import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Step 1: Create a simple dataset
data = {
    'X': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'y': [1.5, 3.2, 4.8, 6.5, 7.7, 9.1, 10.5, 11.6, 13.1, 14.3]
}
df = pd.DataFrame(data)

# Step 2: Visualize the data
plt.scatter(df['X'], df['y'], color='blue', label='Data points')
plt.xlabel('X')
plt.ylabel('y')
plt.title('Simple Linear Regression Example')
plt.legend()
plt.show()

# Step 3: Split the data
X = df[['X']]
y = df['y']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 4: Train the model
model = LinearRegression()
model.fit(X_train, y_train)

# Step 5: Predict
y_pred = model.predict(X_test)

# Step 6: Evaluate
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Step 7: Plot regression line
plt.scatter(X_train, y_train, color='green', label='Training data')
plt.scatter(X_test, y_test, color='orange', label='Test data')
plt.plot(X, model.predict(X), color='red', label='Regression Line')
plt.xlabel('X')
plt.ylabel('y')
plt.title('Linear Regression with Training and Test Data')
plt.legend()
plt.show()
