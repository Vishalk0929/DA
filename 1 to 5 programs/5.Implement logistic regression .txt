import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

# Step 1: Create a simple dataset for binary classification
data = {
    'Study_Hours': [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],
    'Passed': [0, 0, 0, 0, 1, 1, 1, 1, 1, 1]
}
df = pd.DataFrame(data)

# Step 2: Visualize the data
plt.scatter(df['Study_Hours'], df['Passed'], color='blue', label='Data points')
plt.xlabel('Study Hours')
plt.ylabel('Passed (1) / Failed (0)')
plt.title('Logistic Regression Example')
plt.grid(True)
plt.legend()
plt.show()

# Step 3: Features and target
X = df[['Study_Hours']]  # Feature
y = df['Passed']         # Target

# Step 4: Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Train the model
model = LogisticRegression()
model.fit(X_train, y_train)

# Step 6: Make predictions
y_pred = model.predict(X_test)

# Step 7: Evaluation
accuracy = accuracy_score(y_test, y_pred)
conf_matrix = confusion_matrix(y_test, y_pred)
class_report = classification_report(y_test, y_pred)

# Output evaluation results
print(f'Accuracy: {accuracy}')
print(f'Confusion Matrix:\n{conf_matrix}')
print(f'Classification Report:\n{class_report}')

# Step 8: Visualize decision boundary
plt.scatter(df['Study_Hours'], df['Passed'], color='blue', label='Data points')

# Create a smooth curve for logistic regression
x_range = np.linspace(0, 10, 1000).reshape(-1, 1)
y_prob = model.predict_proba(x_range)[:, 1]

plt.plot(x_range, y_prob, color='red', label='Probability Curve')
plt.axhline(0.5, color='gray', linestyle='--', label='Decision Threshold (0.5)')
plt.xlabel('Study Hours')
plt.ylabel('Probability of Passing')
plt.title('Logistic Regression - Decision Boundary')
plt.grid(True)
plt.legend()
plt.ylim(-0.1, 1.1)
plt.show()
